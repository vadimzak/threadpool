{"version":3,"sources":["../../src/test/ThreadPool.test.js"],"names":["describe","it","nums","tp","res","i","_i","queue","push","run","closeAndWaitComplete","to","eql"],"mappings":";;AAEA;;AACA;;;;AACA;;AACA;;;;;;AAEA;AAIAA,SAAS,YAAT,EAAuB,YAAM;AAC3BC,KAAG,mCAAH,4CAAwC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAClCC,gBADkC,GAC3B,CAD2B;AAElCC,cAFkC,GAE7B,yBAAeD,IAAf,CAF6B;AAGlCE,eAHkC,GAG5B,EAH4B;;AAAA,mCAI7BC,CAJ6B;AAKpC,kBAAIC,KAAKD,CAAT;AACAF,iBAAGI,KAAH,2CAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACD,uBAAM,MAAMD,KAAK,EAAjB,CADC;;AAAA;AAEPF,4BAAII,IAAJ,CAASF,EAAT;;AAFO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAT;AANoC;;AAItC,iBAASD,CAAT,GAAW,CAAX,EAAcA,IAAEH,IAAhB,EAAsBG,GAAtB,EAA2B;AAAA,oBAAlBA,CAAkB;AAM1B;;AAEDF,eAAGM,GAAH;AAZsC;AAAA,mBAahCN,GAAGO,oBAAH,EAbgC;;AAAA;;AAetC,8BAAON,GAAP,EAAYO,EAAZ,CAAeC,GAAf,CAAmB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAnB;;AAfsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxC;AAiBD,CAlBD","file":"ThreadPool.test.js","sourcesContent":["// @flow\r\n\r\nimport \"babel-polyfill\"\r\nimport ThreadPool from '../ThreadPool'\r\nimport { sleep } from '../asyncUtils'\r\nimport { expect } from 'chai'\r\n\r\n// mocha flow type declarations\r\ndeclare function describe(name: string, spec: () => void): void\r\ndeclare function it(name: string, spec: Function): void\r\n\r\ndescribe('ThreadPool', () => {\r\n  it('runs queued functions in parallel', async () => {\r\n    let nums = 3\r\n    let tp = new ThreadPool(nums)\r\n    let res = []\r\n    for (let i=0; i<nums; i++) {\r\n      let _i = i\r\n      tp.queue(async () => {\r\n        await sleep(100 - _i * 10)\r\n        res.push(_i)\r\n      })\r\n    }\r\n\r\n    tp.run()\r\n    await tp.closeAndWaitComplete()\r\n\r\n    expect(res).to.eql([2,1,0])\r\n  })\r\n})"]}