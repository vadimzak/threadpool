{"version":3,"sources":["../../src/test/ThreadPool.test.js"],"names":["describe","it","res","tp","i","_i","queue","push","runAllQueued","to","eql","run","closeAndWaitComplete","map","n","Promise","setTimeout","r","caughtErr","errorHandler","err","not","be","null","startCount","waitComplete"],"mappings":";;AAEA;;AACA;;;;AACA;;AACA;;;;;;AAEA;AAIAA,SAAS,YAAT,EAAuB,YAAM;AAC3BC,KAAG,mCAAH,4CAAwC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAClCC,eADkC,GAC5B,EAD4B;AAElCC,cAFkC,GAE7B,yBAAe,CAAf,CAF6B;;AAAA,mCAG7BC,CAH6B;AAIpC,kBAAIC,KAAKD,CAAT;AACAD,iBAAGG,KAAH,2CAAS;AAAA;AAAA;AAAA;AAAA;AACPJ,4BAAIK,IAAJ,YAAkBF,EAAlB;AADO;AAAA,+BAED,uBAAM,EAAN,CAFC;;AAAA;AAGPH,4BAAIK,IAAJ,WAAiBF,EAAjB;;AAHO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAT;AALoC;;AAGtC,iBAASD,CAAT,GAAa,CAAb,EAAgBA,IAAI,CAApB,EAAuBA,GAAvB,EAA4B;AAAA,oBAAnBA,CAAmB;AAO3B;AAVqC;AAAA,mBAWhCD,GAAGK,YAAH,EAXgC;;AAAA;;AAatC,8BAAON,GAAP,EAAYO,EAAZ,CAAeC,GAAf,CAAmB,CAAC,SAAD,EAAY,SAAZ,EAAuB,QAAvB,EAAiC,QAAjC,CAAnB;;AAbsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxC;;AAgBAT,KAAG,qBAAH,4CAA0B;AAAA;;AAAA;AAAA;AAAA;AAAA;AACpBC,eADoB,GACd,EADc;AAEpBC,cAFoB,GAEf,yBAAe,CAAf,CAFe;;AAAA,qCAGfC,CAHe;AAItB,kBAAIC,KAAKD,CAAT;AACAD,iBAAGG,KAAH,2CAAS;AAAA;AAAA;AAAA;AAAA;AACPJ,4BAAIK,IAAJ,YAAkBF,EAAlB;AADO;AAAA,+BAED,uBAAM,EAAN,CAFC;;AAAA;AAGPH,4BAAIK,IAAJ,WAAiBF,EAAjB;;AAHO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAT;AALsB;;AAGxB,iBAASD,CAAT,GAAa,CAAb,EAAgBA,IAAI,CAApB,EAAuBA,GAAvB,EAA4B;AAAA,qBAAnBA,CAAmB;AAO3B;AAVuB;AAAA,mBAWlBD,GAAGK,YAAH,EAXkB;;AAAA;;AAaxB,8BAAON,GAAP,EAAYO,EAAZ,CAAeC,GAAf,CAAmB,CAAC,SAAD,EAAY,SAAZ,EAAuB,QAAvB,EAAiC,QAAjC,EAA2C,SAA3C,EAAsD,QAAtD,CAAnB;;AAbwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;;AAgBAT,KAAG,oCAAH,4CAAyC;AAAA;AAAA;AAAA;AAAA;AAAA;AACnCC,eADmC,GAC7B,EAD6B;AAEnCC,cAFmC,GAE9B,yBAAe,CAAf,CAF8B;;AAGvCA,eAAGG,KAAH,2CAAS;AAAA;AAAA;AAAA;AAAA;AACPJ,0BAAIK,IAAJ,CAAS,CAAT;;AADO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAT;AAGAJ,eAAGQ,GAAH;AACAT,gBAAIK,IAAJ,CAAS,CAAT;AAPuC;AAAA,mBAQjCJ,GAAGS,oBAAH,EARiC;;AAAA;;AAUvC,8BAAOV,GAAP,EAAYO,EAAZ,CAAeC,GAAf,CAAmB,CAAC,CAAD,EAAI,CAAJ,CAAnB;;AAVuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAzC;;AAaAT,KAAG,2BAAH,4CAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1BC,eAD0B,GACpB,EADoB;AAAA;AAAA,mBAExB,qBAAWS,GAAX,CAAe,CAAf,EAAkB,CAAC,CAAD,EAAI,CAAJ,EAAOE,GAAP,CAAW;AAAA,+DAAK;AAAA;AAAA;AAAA;AAAA;AAAA,0DAAYX,IAAIK,IAAJ,CAASO,CAAT,CAAZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAL;AAAA,aAAX,CAAlB,CAFwB;;AAAA;;AAI9B,8BAAOZ,GAAP,EAAYO,EAAZ,CAAeC,GAAf,CAAmB,CAAC,CAAD,EAAI,CAAJ,CAAnB;;AAJ8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhC;;AAOAT,KAAG,qBAAH,4CAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AACpBC,eADoB,GACd,EADc;AAAA;AAAA,mBAElB,qBAAWS,GAAX,CAAe,CAAf,EAAkB,CAAC,CAAD,EAAI,CAAJ,EAAOE,GAAP,CAAW;AAAA,qBAAK,IAAIE,OAAJ,CAAY,aAAK;AACvDb,oBAAIK,IAAJ,YAAkBO,CAAlB;AACAE,2BAAW,YAAM;AACfd,sBAAIK,IAAJ,WAAiBO,CAAjB;AACAG;AACD,iBAHD,EAGG,EAHH;AAID,eANuC,CAAL;AAAA,aAAX,CAAlB,CAFkB;;AAAA;AASxB,8BAAOf,GAAP,EAAYO,EAAZ,CAAeC,GAAf,CAAmB,CAAC,SAAD,EAAY,SAAZ,EAAuB,QAAvB,EAAiC,QAAjC,CAAnB;;AATwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;;AAYAT,KAAG,gBAAH,4CAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AACfiB,qBADe,GACH,IADG;AAAA;AAAA;AAAA,mBAGX,qBAAWP,GAAX,CAAe,CAAf,EAAkB,EAAEQ,cAAc,2BAAO;AAAE,sBAAMC,GAAN;AAAW,eAApC,EAAlB,EAA0D,CAAC,CAAD,EAAI,CAAJ,EAAOP,GAAP,CAAW;AAAA,+DAAK;AAAA;AAAA;AAAA;AAAA;AAAA,8BACxEC,CADwE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAL;AAAA,aAAX,CAA1D,CAHW;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAOjBI;;AAPiB;AASnB,8BAAOA,SAAP,EAAkBT,EAAlB,CAAqBY,GAArB,CAAyBC,EAAzB,CAA4BC,IAA5B;;AATmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB;;AAYAtB,KAAG,kDAAH,4CAAuD;AAAA;AAAA;AAAA;AAAA;AAAA;AACjDuB,sBADiD,GACpC,CADoC;AAAA;AAAA;AAAA,mBAG7C,qBAAWb,GAAX,CAAe,CAAf,EAAkB,EAAEQ,cAAc,2BAAO;AAAE,sBAAMC,GAAN;AAAW,eAApC,EAAlB,EAA0D,CAAC,CAAD,EAAI,CAAJ,EAAOP,GAAP,CAAW;AAAA,+DAAK;AAAA;AAAA;AAAA;AAAA;AAC9EW;AAD8E,8BAExEV,CAFwE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAL;AAAA,aAAX,CAA1D,CAH6C;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAOnC;;AAElB,8BAAOU,UAAP,EAAmBf,EAAnB,CAAsBC,GAAtB,CAA0B,CAA1B;;AATqD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvD;;AAYAT,KAAG,gCAAH,4CAAqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAC/BiB,qBAD+B,GACnB,IADmB;AAE/Bf,cAF+B,GAE1B,yBAAe,CAAf,EAAkB,EAAEgB,cAAc,2BAAO;AAAE,sBAAMC,GAAN;AAAW,eAApC,EAAlB,EAA0D,CAAC,CAAD,EAAI,CAAJ,EAAOP,GAAP,CAAW;AAAA,+DAAK;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAoBC,CAApB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAL;AAAA,aAAX,CAA1D,CAF0B;;AAGnCX,eAAGQ,GAAH;AAHmC;AAAA,mBAI7B,uBAAM,EAAN,CAJ6B;;AAAA;AAAA;AAAA;AAAA,mBAM3BR,GAAGsB,YAAH,EAN2B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAQjCP;;AARiC;AAUnC,8BAAOA,SAAP,EAAkBT,EAAlB,CAAqBY,GAArB,CAAyBC,EAAzB,CAA4BC,IAA5B;;AAVmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArC;AAYD,CArGD","file":"ThreadPool.test.js","sourcesContent":["// @flow\r\n\r\nimport \"babel-polyfill\"\r\nimport ThreadPool from '../ThreadPool'\r\nimport { sleep } from '../asyncUtils'\r\nimport { expect } from 'chai'\r\n\r\n// mocha flow type declarations\r\ndeclare function describe(name: string, spec: () => void): void\r\ndeclare function it(name: string, spec: Function): void\r\n\r\ndescribe('ThreadPool', () => {\r\n  it('runs queued functions in parallel', async () => {\r\n    let res = []\r\n    let tp = new ThreadPool(2)\r\n    for (let i = 0; i < 2; i++) {\r\n      let _i = i\r\n      tp.queue(async () => {\r\n        res.push(`before${_i}`)        \r\n        await sleep(10)\r\n        res.push(`after${_i}`)     \r\n      })\r\n    }\r\n    await tp.runAllQueued()\r\n\r\n    expect(res).to.eql(['before0', 'before1', 'after0', 'after1'])\r\n  })\r\n\r\n  it('throttles execution', async () => {\r\n    let res = []\r\n    let tp = new ThreadPool(2)\r\n    for (let i = 0; i < 3; i++) {\r\n      let _i = i\r\n      tp.queue(async () => {\r\n        res.push(`before${_i}`)        \r\n        await sleep(10)\r\n        res.push(`after${_i}`)     \r\n      })\r\n    }\r\n    await tp.runAllQueued()\r\n\r\n    expect(res).to.eql(['before0', 'before1', 'after0', 'after1', 'before2', 'after2'])\r\n  })\r\n\r\n  it('does not execute queued tesks sync', async () => {\r\n    let res = []\r\n    let tp = new ThreadPool(3)\r\n    tp.queue(async () => {\r\n      res.push(2)\r\n    })\r\n    tp.run()\r\n    res.push(1)\r\n    await tp.closeAndWaitComplete()\r\n\r\n    expect(res).to.eql([1, 2])\r\n  })\r\n\r\n  it('works with short notation', async () => {\r\n    let res = []\r\n    await ThreadPool.run(2, [0, 1].map(n => async () => res.push(n)))\r\n\r\n    expect(res).to.eql([0, 1])\r\n  })\r\n\r\n  it('works with Promises', async () => {\r\n    let res = []\r\n    await ThreadPool.run(2, [0, 1].map(n => new Promise(r => {\r\n      res.push(`before${n}`) \r\n      setTimeout(() => { \r\n        res.push(`after${n}`) \r\n        r()\r\n      }, 10)\r\n    })))\r\n    expect(res).to.eql(['before0', 'before1', 'after0', 'after1'])\r\n  })\r\n \r\n  it('catches errors', async () => {\r\n    let caughtErr = null\r\n    try {\r\n      await ThreadPool.run(2, { errorHandler: err => { throw err } }, [0, 1].map(n => async () => { \r\n        throw n\r\n      }))\r\n    } catch (err) {\r\n      caughtErr = err\r\n    }\r\n    expect(caughtErr).to.not.be.null\r\n  })\r\n\r\n  it('should not to run new tasks after uncaught error', async () => {\r\n    let startCount = 0\r\n    try {\r\n      await ThreadPool.run(1, { errorHandler: err => { throw err } }, [0, 1].map(n => async () => { \r\n        startCount++\r\n        throw n\r\n      }))\r\n    } catch (err) { } // eslint-disable-line no-empty\r\n\r\n    expect(startCount).to.eql(1)\r\n  })\r\n\r\n  it('catches error after completion', async () => {\r\n    let caughtErr = null\r\n    let tp = new ThreadPool(2, { errorHandler: err => { throw err } }, [0, 1].map(n => async () => { throw n }))\r\n    tp.run()\r\n    await sleep(10)\r\n    try {\r\n      await tp.waitComplete()\r\n    } catch(err) {\r\n      caughtErr = err\r\n    }\r\n    expect(caughtErr).to.not.be.null\r\n  })\r\n})"]}